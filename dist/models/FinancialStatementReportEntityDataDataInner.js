"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus analytics-api
 * Api do sistema Pegasus para geração de relatórios e dashboards.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfFinancialStatementReportEntityDataDataInner = instanceOfFinancialStatementReportEntityDataDataInner;
exports.FinancialStatementReportEntityDataDataInnerFromJSON = FinancialStatementReportEntityDataDataInnerFromJSON;
exports.FinancialStatementReportEntityDataDataInnerFromJSONTyped = FinancialStatementReportEntityDataDataInnerFromJSONTyped;
exports.FinancialStatementReportEntityDataDataInnerToJSON = FinancialStatementReportEntityDataDataInnerToJSON;
exports.FinancialStatementReportEntityDataDataInnerToJSONTyped = FinancialStatementReportEntityDataDataInnerToJSONTyped;
var CashFlowReportEntityDataDataInnerPeriod_1 = require("./CashFlowReportEntityDataDataInnerPeriod");
/**
 * Check if a given object implements the FinancialStatementReportEntityDataDataInner interface.
 */
function instanceOfFinancialStatementReportEntityDataDataInner(value) {
    if (!('period' in value) || value['period'] === undefined)
        return false;
    if (!('operationalRevenue' in value) || value['operationalRevenue'] === undefined)
        return false;
    if (!('operatingExpenses' in value) || value['operatingExpenses'] === undefined)
        return false;
    if (!('salesAndMarketingExpenses' in value) || value['salesAndMarketingExpenses'] === undefined)
        return false;
    if (!('contributionMargin' in value) || value['contributionMargin'] === undefined)
        return false;
    if (!('contributionMarginPercent' in value) || value['contributionMarginPercent'] === undefined)
        return false;
    if (!('administrativeExpenses' in value) || value['administrativeExpenses'] === undefined)
        return false;
    if (!('personnelExpenses' in value) || value['personnelExpenses'] === undefined)
        return false;
    if (!('ebitda' in value) || value['ebitda'] === undefined)
        return false;
    if (!('ebitdaPercent' in value) || value['ebitdaPercent'] === undefined)
        return false;
    if (!('financialIncome' in value) || value['financialIncome'] === undefined)
        return false;
    if (!('otherIncome' in value) || value['otherIncome'] === undefined)
        return false;
    if (!('financialExpenses' in value) || value['financialExpenses'] === undefined)
        return false;
    if (!('investments' in value) || value['investments'] === undefined)
        return false;
    if (!('incomeTaxExpense' in value) || value['incomeTaxExpense'] === undefined)
        return false;
    if (!('netIncome' in value) || value['netIncome'] === undefined)
        return false;
    if (!('netIncomePercent' in value) || value['netIncomePercent'] === undefined)
        return false;
    return true;
}
function FinancialStatementReportEntityDataDataInnerFromJSON(json) {
    return FinancialStatementReportEntityDataDataInnerFromJSONTyped(json, false);
}
function FinancialStatementReportEntityDataDataInnerFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'period': (0, CashFlowReportEntityDataDataInnerPeriod_1.CashFlowReportEntityDataDataInnerPeriodFromJSON)(json['period']),
        'operationalRevenue': json['operationalRevenue'],
        'operatingExpenses': json['operatingExpenses'],
        'salesAndMarketingExpenses': json['salesAndMarketingExpenses'],
        'contributionMargin': json['contributionMargin'],
        'contributionMarginPercent': json['contributionMarginPercent'],
        'administrativeExpenses': json['administrativeExpenses'],
        'personnelExpenses': json['personnelExpenses'],
        'ebitda': json['ebitda'],
        'ebitdaPercent': json['ebitdaPercent'],
        'financialIncome': json['financialIncome'],
        'otherIncome': json['otherIncome'],
        'financialExpenses': json['financialExpenses'],
        'investments': json['investments'],
        'incomeTaxExpense': json['incomeTaxExpense'],
        'netIncome': json['netIncome'],
        'netIncomePercent': json['netIncomePercent'],
    };
}
function FinancialStatementReportEntityDataDataInnerToJSON(json) {
    return FinancialStatementReportEntityDataDataInnerToJSONTyped(json, false);
}
function FinancialStatementReportEntityDataDataInnerToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'period': (0, CashFlowReportEntityDataDataInnerPeriod_1.CashFlowReportEntityDataDataInnerPeriodToJSON)(value['period']),
        'operationalRevenue': value['operationalRevenue'],
        'operatingExpenses': value['operatingExpenses'],
        'salesAndMarketingExpenses': value['salesAndMarketingExpenses'],
        'contributionMargin': value['contributionMargin'],
        'contributionMarginPercent': value['contributionMarginPercent'],
        'administrativeExpenses': value['administrativeExpenses'],
        'personnelExpenses': value['personnelExpenses'],
        'ebitda': value['ebitda'],
        'ebitdaPercent': value['ebitdaPercent'],
        'financialIncome': value['financialIncome'],
        'otherIncome': value['otherIncome'],
        'financialExpenses': value['financialExpenses'],
        'investments': value['investments'],
        'incomeTaxExpense': value['incomeTaxExpense'],
        'netIncome': value['netIncome'],
        'netIncomePercent': value['netIncomePercent'],
    };
}
