"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus analytics-api
 * Api do sistema Pegasus para geração de relatórios e dashboards.
 *
 * The version of the OpenAPI document: 1.3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfCashFlowReportEntityDataDataInner = instanceOfCashFlowReportEntityDataDataInner;
exports.CashFlowReportEntityDataDataInnerFromJSON = CashFlowReportEntityDataDataInnerFromJSON;
exports.CashFlowReportEntityDataDataInnerFromJSONTyped = CashFlowReportEntityDataDataInnerFromJSONTyped;
exports.CashFlowReportEntityDataDataInnerToJSON = CashFlowReportEntityDataDataInnerToJSON;
exports.CashFlowReportEntityDataDataInnerToJSONTyped = CashFlowReportEntityDataDataInnerToJSONTyped;
var CashFlowReportEntityDataDataInnerPeriod_1 = require("./CashFlowReportEntityDataDataInnerPeriod");
var CashFlowReportEntityDataDataInnerInsertedAccountsInner_1 = require("./CashFlowReportEntityDataDataInnerInsertedAccountsInner");
/**
 * Check if a given object implements the CashFlowReportEntityDataDataInner interface.
 */
function instanceOfCashFlowReportEntityDataDataInner(value) {
    if (!('period' in value) || value['period'] === undefined)
        return false;
    if (!('openingBalance' in value) || value['openingBalance'] === undefined)
        return false;
    if (!('totalIncome' in value) || value['totalIncome'] === undefined)
        return false;
    if (!('totalOutcome' in value) || value['totalOutcome'] === undefined)
        return false;
    if (!('closingBalance' in value) || value['closingBalance'] === undefined)
        return false;
    if (!('insertedAccounts' in value) || value['insertedAccounts'] === undefined)
        return false;
    return true;
}
function CashFlowReportEntityDataDataInnerFromJSON(json) {
    return CashFlowReportEntityDataDataInnerFromJSONTyped(json, false);
}
function CashFlowReportEntityDataDataInnerFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'period': (0, CashFlowReportEntityDataDataInnerPeriod_1.CashFlowReportEntityDataDataInnerPeriodFromJSON)(json['period']),
        'openingBalance': json['openingBalance'],
        'totalIncome': json['totalIncome'],
        'totalOutcome': json['totalOutcome'],
        'closingBalance': json['closingBalance'],
        'insertedAccounts': (json['insertedAccounts'].map(CashFlowReportEntityDataDataInnerInsertedAccountsInner_1.CashFlowReportEntityDataDataInnerInsertedAccountsInnerFromJSON)),
    };
}
function CashFlowReportEntityDataDataInnerToJSON(json) {
    return CashFlowReportEntityDataDataInnerToJSONTyped(json, false);
}
function CashFlowReportEntityDataDataInnerToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'period': (0, CashFlowReportEntityDataDataInnerPeriod_1.CashFlowReportEntityDataDataInnerPeriodToJSON)(value['period']),
        'openingBalance': value['openingBalance'],
        'totalIncome': value['totalIncome'],
        'totalOutcome': value['totalOutcome'],
        'closingBalance': value['closingBalance'],
        'insertedAccounts': (value['insertedAccounts'].map(CashFlowReportEntityDataDataInnerInsertedAccountsInner_1.CashFlowReportEntityDataDataInnerInsertedAccountsInnerToJSON)),
    };
}
