/**
 * Sofia Pegasus analytics-api
 * Api do sistema Pegasus para geração de relatórios e dashboards.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { FinancialMeasuresReportEntity, FinancialResultCompositionReportEntity, FinancialStatementReportEntity } from '../models/index';
export interface GenerateFinancialMeasuresReportRequest {
    recurringFinancialRecord?: string;
    installmentFinancialRecord?: string;
    account?: string;
    reconciled?: string;
    completed?: string;
    amountType?: GenerateFinancialMeasuresReportAmountTypeEnum;
    tags?: string;
    createdAtTo?: string;
    createdAtFrom?: string;
    cashDateTo?: string;
    cashDateFrom?: string;
    competenceDateTo?: string;
    competenceDateFrom?: string;
    subcategory?: string;
    contact?: string;
    dueDateTo?: string;
    dueDateFrom?: string;
    direction?: GenerateFinancialMeasuresReportDirectionEnum;
}
export interface GenerateFinancialResultCompositionReportRequest {
    amountType?: GenerateFinancialResultCompositionReportAmountTypeEnum;
    reconciled?: string;
    completed?: string;
    tags?: string;
    createdAtTo?: string;
    cashDateTo?: string;
    cashDateFrom?: string;
    competenceDateTo?: string;
    competenceDateFrom?: string;
    subcategory?: string;
    contact?: string;
    dueDateTo?: string;
    dueDateFrom?: string;
    direction?: GenerateFinancialResultCompositionReportDirectionEnum;
}
export interface GenerateFinancialStatementReportRequest {
    referenceDate: GenerateFinancialStatementReportReferenceDateEnum;
    periodTo: string;
    periodFrom: string;
    grouping: GenerateFinancialStatementReportGroupingEnum;
    tags?: string;
    completed?: string;
}
/**
 * FinancialStatementsReportsApi - interface
 *
 * @export
 * @interface FinancialStatementsReportsApiInterface
 */
export interface FinancialStatementsReportsApiInterface {
    /**
     *
     * @summary Gera relatório de medidas financeiras
     * @param {string} [recurringFinancialRecord] ID do lançamento financeiro recorrente
     * @param {string} [installmentFinancialRecord] ID do lançamento financeiro recorrente
     * @param {string} [account] ID da conta
     * @param {string} [reconciled] Status de conciliação
     * @param {string} [completed] Status de conclusão dos lançamentos
     * @param {'base' | 'final'} [amountType] Tipo de valor a ser utilizado nos cálculos. \&quot;base\&quot; para amount, \&quot;final\&quot; para finalAmount. Padrão é \&quot;final\&quot;.
     * @param {string} [tags] IDs das tags
     * @param {string} [createdAtTo] Data final da criação
     * @param {string} [createdAtFrom] Data inicial da criação
     * @param {string} [cashDateTo] Data final do caixa
     * @param {string} [cashDateFrom] Data inicial do caixa
     * @param {string} [competenceDateTo] Data final da competência
     * @param {string} [competenceDateFrom] Data inicial da competência
     * @param {string} [subcategory] ID da subcategoria
     * @param {string} [contact] ID do contato
     * @param {string} [dueDateTo] Data final do vencimento
     * @param {string} [dueDateFrom] Data inicial do vencimento
     * @param {'IN' | 'OUT'} [direction] Direção do relatório
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialStatementsReportsApiInterface
     */
    generateFinancialMeasuresReportRaw(requestParameters: GenerateFinancialMeasuresReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialMeasuresReportEntity>>;
    /**
     * Gera relatório de medidas financeiras
     */
    generateFinancialMeasuresReport(requestParameters: GenerateFinancialMeasuresReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialMeasuresReportEntity>;
    /**
     *
     * @summary Gera relatório de composição do resultado financeiro
     * @param {'base' | 'final'} [amountType] Tipo de valor a ser utilizado nos cálculos. \&quot;base\&quot; para amount, \&quot;final\&quot; para finalAmount. Padrão é \&quot;final\&quot;.
     * @param {string} [reconciled] Status de conciliação
     * @param {string} [completed] Status do relatório
     * @param {string} [tags] IDs das tags
     * @param {string} [createdAtTo] Data final da criação
     * @param {string} [cashDateTo] Data final do caixa
     * @param {string} [cashDateFrom] Data inicial do caixa
     * @param {string} [competenceDateTo] Data final da competência
     * @param {string} [competenceDateFrom] Data inicial da competência
     * @param {string} [subcategory] ID da subcategoria
     * @param {string} [contact] ID do contato
     * @param {string} [dueDateTo] Data final do vencimento
     * @param {string} [dueDateFrom] Data inicial do vencimento
     * @param {'IN' | 'OUT'} [direction] Direção do relatório
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialStatementsReportsApiInterface
     */
    generateFinancialResultCompositionReportRaw(requestParameters: GenerateFinancialResultCompositionReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialResultCompositionReportEntity>>;
    /**
     * Gera relatório de composição do resultado financeiro
     */
    generateFinancialResultCompositionReport(requestParameters: GenerateFinancialResultCompositionReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialResultCompositionReportEntity>;
    /**
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     * @summary Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     * @param {'dueDate' | 'cashDate' | 'competenceDate'} referenceDate Campo de data a ser utilizado para filtros
     * @param {string} periodTo Período do relatório
     * @param {string} periodFrom Período do relatório
     * @param {'daily' | 'monthly' | 'yearly'} grouping Agrupamento do relatório
     * @param {string} [tags] IDs das tags
     * @param {string} [completed] Status de conclusão dos lançamentos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialStatementsReportsApiInterface
     */
    generateFinancialStatementReportRaw(requestParameters: GenerateFinancialStatementReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialStatementReportEntity>>;
    /**
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     */
    generateFinancialStatementReport(requestParameters: GenerateFinancialStatementReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialStatementReportEntity>;
}
/**
 *
 */
export declare class FinancialStatementsReportsApi extends runtime.BaseAPI implements FinancialStatementsReportsApiInterface {
    /**
     * Gera relatório de medidas financeiras
     */
    generateFinancialMeasuresReportRaw(requestParameters: GenerateFinancialMeasuresReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialMeasuresReportEntity>>;
    /**
     * Gera relatório de medidas financeiras
     */
    generateFinancialMeasuresReport(requestParameters?: GenerateFinancialMeasuresReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialMeasuresReportEntity>;
    /**
     * Gera relatório de composição do resultado financeiro
     */
    generateFinancialResultCompositionReportRaw(requestParameters: GenerateFinancialResultCompositionReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialResultCompositionReportEntity>>;
    /**
     * Gera relatório de composição do resultado financeiro
     */
    generateFinancialResultCompositionReport(requestParameters?: GenerateFinancialResultCompositionReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialResultCompositionReportEntity>;
    /**
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     */
    generateFinancialStatementReportRaw(requestParameters: GenerateFinancialStatementReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialStatementReportEntity>>;
    /**
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     */
    generateFinancialStatementReport(requestParameters: GenerateFinancialStatementReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialStatementReportEntity>;
}
/**
 * @export
 */
export declare const GenerateFinancialMeasuresReportAmountTypeEnum: {
    readonly Base: "base";
    readonly Final: "final";
};
export type GenerateFinancialMeasuresReportAmountTypeEnum = typeof GenerateFinancialMeasuresReportAmountTypeEnum[keyof typeof GenerateFinancialMeasuresReportAmountTypeEnum];
/**
 * @export
 */
export declare const GenerateFinancialMeasuresReportDirectionEnum: {
    readonly In: "IN";
    readonly Out: "OUT";
};
export type GenerateFinancialMeasuresReportDirectionEnum = typeof GenerateFinancialMeasuresReportDirectionEnum[keyof typeof GenerateFinancialMeasuresReportDirectionEnum];
/**
 * @export
 */
export declare const GenerateFinancialResultCompositionReportAmountTypeEnum: {
    readonly Base: "base";
    readonly Final: "final";
};
export type GenerateFinancialResultCompositionReportAmountTypeEnum = typeof GenerateFinancialResultCompositionReportAmountTypeEnum[keyof typeof GenerateFinancialResultCompositionReportAmountTypeEnum];
/**
 * @export
 */
export declare const GenerateFinancialResultCompositionReportDirectionEnum: {
    readonly In: "IN";
    readonly Out: "OUT";
};
export type GenerateFinancialResultCompositionReportDirectionEnum = typeof GenerateFinancialResultCompositionReportDirectionEnum[keyof typeof GenerateFinancialResultCompositionReportDirectionEnum];
/**
 * @export
 */
export declare const GenerateFinancialStatementReportReferenceDateEnum: {
    readonly DueDate: "dueDate";
    readonly CashDate: "cashDate";
    readonly CompetenceDate: "competenceDate";
};
export type GenerateFinancialStatementReportReferenceDateEnum = typeof GenerateFinancialStatementReportReferenceDateEnum[keyof typeof GenerateFinancialStatementReportReferenceDateEnum];
/**
 * @export
 */
export declare const GenerateFinancialStatementReportGroupingEnum: {
    readonly Daily: "daily";
    readonly Monthly: "monthly";
    readonly Yearly: "yearly";
};
export type GenerateFinancialStatementReportGroupingEnum = typeof GenerateFinancialStatementReportGroupingEnum[keyof typeof GenerateFinancialStatementReportGroupingEnum];
