"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus analytics-api
 * Api do sistema Pegasus para geração de relatórios e dashboards.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerateFinancialStatementReportGroupingEnum = exports.GenerateFinancialStatementReportReferenceDateEnum = exports.GenerateFinancialResultCompositionReportDirectionEnum = exports.GenerateFinancialResultCompositionReportAmountTypeEnum = exports.GenerateFinancialMeasuresReportDirectionEnum = exports.GenerateFinancialMeasuresReportAmountTypeEnum = exports.FinancialStatementsReportsApi = void 0;
var runtime = require("../runtime");
var index_1 = require("../models/index");
/**
 *
 */
var FinancialStatementsReportsApi = /** @class */ (function (_super) {
    __extends(FinancialStatementsReportsApi, _super);
    function FinancialStatementsReportsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gera relatório de medidas financeiras
     */
    FinancialStatementsReportsApi.prototype.generateFinancialMeasuresReportRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['recurringFinancialRecord'] != null) {
                            queryParameters['recurringFinancialRecord'] = requestParameters['recurringFinancialRecord'];
                        }
                        if (requestParameters['installmentFinancialRecord'] != null) {
                            queryParameters['installmentFinancialRecord'] = requestParameters['installmentFinancialRecord'];
                        }
                        if (requestParameters['account'] != null) {
                            queryParameters['account'] = requestParameters['account'];
                        }
                        if (requestParameters['reconciled'] != null) {
                            queryParameters['reconciled'] = requestParameters['reconciled'];
                        }
                        if (requestParameters['completed'] != null) {
                            queryParameters['completed'] = requestParameters['completed'];
                        }
                        if (requestParameters['amountType'] != null) {
                            queryParameters['amountType'] = requestParameters['amountType'];
                        }
                        if (requestParameters['tags'] != null) {
                            queryParameters['tags'] = requestParameters['tags'];
                        }
                        if (requestParameters['createdAtTo'] != null) {
                            queryParameters['createdAtTo'] = requestParameters['createdAtTo'];
                        }
                        if (requestParameters['createdAtFrom'] != null) {
                            queryParameters['createdAtFrom'] = requestParameters['createdAtFrom'];
                        }
                        if (requestParameters['cashDateTo'] != null) {
                            queryParameters['cashDateTo'] = requestParameters['cashDateTo'];
                        }
                        if (requestParameters['cashDateFrom'] != null) {
                            queryParameters['cashDateFrom'] = requestParameters['cashDateFrom'];
                        }
                        if (requestParameters['competenceDateTo'] != null) {
                            queryParameters['competenceDateTo'] = requestParameters['competenceDateTo'];
                        }
                        if (requestParameters['competenceDateFrom'] != null) {
                            queryParameters['competenceDateFrom'] = requestParameters['competenceDateFrom'];
                        }
                        if (requestParameters['subcategory'] != null) {
                            queryParameters['subcategory'] = requestParameters['subcategory'];
                        }
                        if (requestParameters['contact'] != null) {
                            queryParameters['contact'] = requestParameters['contact'];
                        }
                        if (requestParameters['dueDateTo'] != null) {
                            queryParameters['dueDateTo'] = requestParameters['dueDateTo'];
                        }
                        if (requestParameters['dueDateFrom'] != null) {
                            queryParameters['dueDateFrom'] = requestParameters['dueDateFrom'];
                        }
                        if (requestParameters['direction'] != null) {
                            queryParameters['direction'] = requestParameters['direction'];
                        }
                        headerParameters = {};
                        urlPath = "/external/financial-statements/financial-measures-report";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FinancialMeasuresReportEntityFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Gera relatório de medidas financeiras
     */
    FinancialStatementsReportsApi.prototype.generateFinancialMeasuresReport = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.generateFinancialMeasuresReportRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Gera relatório de composição do resultado financeiro
     */
    FinancialStatementsReportsApi.prototype.generateFinancialResultCompositionReportRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['amountType'] != null) {
                            queryParameters['amountType'] = requestParameters['amountType'];
                        }
                        if (requestParameters['reconciled'] != null) {
                            queryParameters['reconciled'] = requestParameters['reconciled'];
                        }
                        if (requestParameters['completed'] != null) {
                            queryParameters['completed'] = requestParameters['completed'];
                        }
                        if (requestParameters['tags'] != null) {
                            queryParameters['tags'] = requestParameters['tags'];
                        }
                        if (requestParameters['createdAtTo'] != null) {
                            queryParameters['createdAtTo'] = requestParameters['createdAtTo'];
                        }
                        if (requestParameters['cashDateTo'] != null) {
                            queryParameters['cashDateTo'] = requestParameters['cashDateTo'];
                        }
                        if (requestParameters['cashDateFrom'] != null) {
                            queryParameters['cashDateFrom'] = requestParameters['cashDateFrom'];
                        }
                        if (requestParameters['competenceDateTo'] != null) {
                            queryParameters['competenceDateTo'] = requestParameters['competenceDateTo'];
                        }
                        if (requestParameters['competenceDateFrom'] != null) {
                            queryParameters['competenceDateFrom'] = requestParameters['competenceDateFrom'];
                        }
                        if (requestParameters['subcategory'] != null) {
                            queryParameters['subcategory'] = requestParameters['subcategory'];
                        }
                        if (requestParameters['contact'] != null) {
                            queryParameters['contact'] = requestParameters['contact'];
                        }
                        if (requestParameters['dueDateTo'] != null) {
                            queryParameters['dueDateTo'] = requestParameters['dueDateTo'];
                        }
                        if (requestParameters['dueDateFrom'] != null) {
                            queryParameters['dueDateFrom'] = requestParameters['dueDateFrom'];
                        }
                        if (requestParameters['direction'] != null) {
                            queryParameters['direction'] = requestParameters['direction'];
                        }
                        headerParameters = {};
                        urlPath = "/external/financial-statements/result-composition/report";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FinancialResultCompositionReportEntityFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Gera relatório de composição do resultado financeiro
     */
    FinancialStatementsReportsApi.prototype.generateFinancialResultCompositionReport = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.generateFinancialResultCompositionReportRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     */
    FinancialStatementsReportsApi.prototype.generateFinancialStatementReportRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['referenceDate'] == null) {
                            throw new runtime.RequiredError('referenceDate', 'Required parameter "referenceDate" was null or undefined when calling generateFinancialStatementReport().');
                        }
                        if (requestParameters['periodTo'] == null) {
                            throw new runtime.RequiredError('periodTo', 'Required parameter "periodTo" was null or undefined when calling generateFinancialStatementReport().');
                        }
                        if (requestParameters['periodFrom'] == null) {
                            throw new runtime.RequiredError('periodFrom', 'Required parameter "periodFrom" was null or undefined when calling generateFinancialStatementReport().');
                        }
                        if (requestParameters['grouping'] == null) {
                            throw new runtime.RequiredError('grouping', 'Required parameter "grouping" was null or undefined when calling generateFinancialStatementReport().');
                        }
                        queryParameters = {};
                        if (requestParameters['tags'] != null) {
                            queryParameters['tags'] = requestParameters['tags'];
                        }
                        if (requestParameters['completed'] != null) {
                            queryParameters['completed'] = requestParameters['completed'];
                        }
                        if (requestParameters['referenceDate'] != null) {
                            queryParameters['referenceDate'] = requestParameters['referenceDate'];
                        }
                        if (requestParameters['periodTo'] != null) {
                            queryParameters['periodTo'] = requestParameters['periodTo'];
                        }
                        if (requestParameters['periodFrom'] != null) {
                            queryParameters['periodFrom'] = requestParameters['periodFrom'];
                        }
                        if (requestParameters['grouping'] != null) {
                            queryParameters['grouping'] = requestParameters['grouping'];
                        }
                        headerParameters = {};
                        urlPath = "/external/financial-statements/report";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FinancialStatementReportEntityFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     */
    FinancialStatementsReportsApi.prototype.generateFinancialStatementReport = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.generateFinancialStatementReportRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return FinancialStatementsReportsApi;
}(runtime.BaseAPI));
exports.FinancialStatementsReportsApi = FinancialStatementsReportsApi;
/**
 * @export
 */
exports.GenerateFinancialMeasuresReportAmountTypeEnum = {
    Base: 'base',
    Final: 'final'
};
/**
 * @export
 */
exports.GenerateFinancialMeasuresReportDirectionEnum = {
    In: 'IN',
    Out: 'OUT'
};
/**
 * @export
 */
exports.GenerateFinancialResultCompositionReportAmountTypeEnum = {
    Base: 'base',
    Final: 'final'
};
/**
 * @export
 */
exports.GenerateFinancialResultCompositionReportDirectionEnum = {
    In: 'IN',
    Out: 'OUT'
};
/**
 * @export
 */
exports.GenerateFinancialStatementReportReferenceDateEnum = {
    DueDate: 'dueDate',
    CashDate: 'cashDate',
    CompetenceDate: 'competenceDate'
};
/**
 * @export
 */
exports.GenerateFinancialStatementReportGroupingEnum = {
    Daily: 'daily',
    Monthly: 'monthly',
    Yearly: 'yearly'
};
