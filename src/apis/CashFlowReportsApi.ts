/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus analytics-api
 * Api do sistema Pegasus para geração de relatórios e dashboards.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CashFlowReportEntity,
  CurrentMonthCashFlowEntity,
  ProjectedCashFlowEntity,
} from '../models/index';
import {
    CashFlowReportEntityFromJSON,
    CashFlowReportEntityToJSON,
    CurrentMonthCashFlowEntityFromJSON,
    CurrentMonthCashFlowEntityToJSON,
    ProjectedCashFlowEntityFromJSON,
    ProjectedCashFlowEntityToJSON,
} from '../models/index';

export interface GenerateCashFlowReportRequest {
    periodTo: string;
    periodFrom: string;
    grouping: GenerateCashFlowReportGroupingEnum;
    tags?: string;
    reconciled?: string;
    bankAccounts?: string;
}

export interface GetCurrentMonthCashFlowRequest {
    direction: GetCurrentMonthCashFlowDirectionEnum;
}

/**
 * CashFlowReportsApi - interface
 * 
 * @export
 * @interface CashFlowReportsApiInterface
 */
export interface CashFlowReportsApiInterface {
    /**
     * 
     * @summary Gera um relatório de fluxo de caixa
     * @param {string} periodTo Data final do período
     * @param {string} periodFrom Data inicial do período
     * @param {'daily' | 'monthly' | 'yearly'} grouping Agrupamento do relatório
     * @param {string} [tags] IDs das tags
     * @param {string} [reconciled] Status de conciliação
     * @param {string} [bankAccounts] IDs das contas bancárias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowReportsApiInterface
     */
    generateCashFlowReportRaw(requestParameters: GenerateCashFlowReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashFlowReportEntity>>;

    /**
     * Gera um relatório de fluxo de caixa
     */
    generateCashFlowReport(requestParameters: GenerateCashFlowReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashFlowReportEntity>;

    /**
     * 
     * @summary Obtém o fluxo de caixa do mês atual por direção
     * @param {'IN' | 'OUT'} direction Direção do lançamento (IN ou OUT)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowReportsApiInterface
     */
    getCurrentMonthCashFlowRaw(requestParameters: GetCurrentMonthCashFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentMonthCashFlowEntity>>;

    /**
     * Obtém o fluxo de caixa do mês atual por direção
     */
    getCurrentMonthCashFlow(requestParameters: GetCurrentMonthCashFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentMonthCashFlowEntity>;

    /**
     * 
     * @summary Obtém o fluxo de caixa projetado de D-3 a D+8
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowReportsApiInterface
     */
    getProjectedCashFlowRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectedCashFlowEntity>>;

    /**
     * Obtém o fluxo de caixa projetado de D-3 a D+8
     */
    getProjectedCashFlow(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectedCashFlowEntity>;

}

/**
 * 
 */
export class CashFlowReportsApi extends runtime.BaseAPI implements CashFlowReportsApiInterface {

    /**
     * Gera um relatório de fluxo de caixa
     */
    async generateCashFlowReportRaw(requestParameters: GenerateCashFlowReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashFlowReportEntity>> {
        if (requestParameters['periodTo'] == null) {
            throw new runtime.RequiredError(
                'periodTo',
                'Required parameter "periodTo" was null or undefined when calling generateCashFlowReport().'
            );
        }

        if (requestParameters['periodFrom'] == null) {
            throw new runtime.RequiredError(
                'periodFrom',
                'Required parameter "periodFrom" was null or undefined when calling generateCashFlowReport().'
            );
        }

        if (requestParameters['grouping'] == null) {
            throw new runtime.RequiredError(
                'grouping',
                'Required parameter "grouping" was null or undefined when calling generateCashFlowReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['reconciled'] != null) {
            queryParameters['reconciled'] = requestParameters['reconciled'];
        }

        if (requestParameters['bankAccounts'] != null) {
            queryParameters['bankAccounts'] = requestParameters['bankAccounts'];
        }

        if (requestParameters['periodTo'] != null) {
            queryParameters['periodTo'] = requestParameters['periodTo'];
        }

        if (requestParameters['periodFrom'] != null) {
            queryParameters['periodFrom'] = requestParameters['periodFrom'];
        }

        if (requestParameters['grouping'] != null) {
            queryParameters['grouping'] = requestParameters['grouping'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/cash-flow/report`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashFlowReportEntityFromJSON(jsonValue));
    }

    /**
     * Gera um relatório de fluxo de caixa
     */
    async generateCashFlowReport(requestParameters: GenerateCashFlowReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashFlowReportEntity> {
        const response = await this.generateCashFlowReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Obtém o fluxo de caixa do mês atual por direção
     */
    async getCurrentMonthCashFlowRaw(requestParameters: GetCurrentMonthCashFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentMonthCashFlowEntity>> {
        if (requestParameters['direction'] == null) {
            throw new runtime.RequiredError(
                'direction',
                'Required parameter "direction" was null or undefined when calling getCurrentMonthCashFlow().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/cash-flow/current-month`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentMonthCashFlowEntityFromJSON(jsonValue));
    }

    /**
     * Obtém o fluxo de caixa do mês atual por direção
     */
    async getCurrentMonthCashFlow(requestParameters: GetCurrentMonthCashFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentMonthCashFlowEntity> {
        const response = await this.getCurrentMonthCashFlowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Obtém o fluxo de caixa projetado de D-3 a D+8
     */
    async getProjectedCashFlowRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectedCashFlowEntity>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/cash-flow/projected`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectedCashFlowEntityFromJSON(jsonValue));
    }

    /**
     * Obtém o fluxo de caixa projetado de D-3 a D+8
     */
    async getProjectedCashFlow(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectedCashFlowEntity> {
        const response = await this.getProjectedCashFlowRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GenerateCashFlowReportGroupingEnum = {
    Daily: 'daily',
    Monthly: 'monthly',
    Yearly: 'yearly'
} as const;
export type GenerateCashFlowReportGroupingEnum = typeof GenerateCashFlowReportGroupingEnum[keyof typeof GenerateCashFlowReportGroupingEnum];
/**
 * @export
 */
export const GetCurrentMonthCashFlowDirectionEnum = {
    In: 'IN',
    Out: 'OUT'
} as const;
export type GetCurrentMonthCashFlowDirectionEnum = typeof GetCurrentMonthCashFlowDirectionEnum[keyof typeof GetCurrentMonthCashFlowDirectionEnum];
