/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus analytics-api
 * Api do sistema Pegasus para geração de relatórios e dashboards.
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface GetOrganizationBalanceRequest {
    periodAmount: number;
    periodType: GetOrganizationBalancePeriodTypeEnum;
}

/**
 * OrganizationBalanceApi - interface
 * 
 * @export
 * @interface OrganizationBalanceApiInterface
 */
export interface OrganizationBalanceApiInterface {
    /**
     * 
     * @summary Get organization balance
     * @param {number} periodAmount Quantidade de períodos
     * @param {'day' | 'month' | 'year'} periodType Tipo de período
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationBalanceApiInterface
     */
    getOrganizationBalanceRaw(requestParameters: GetOrganizationBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get organization balance
     */
    getOrganizationBalance(requestParameters: GetOrganizationBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class OrganizationBalanceApi extends runtime.BaseAPI implements OrganizationBalanceApiInterface {

    /**
     * Get organization balance
     */
    async getOrganizationBalanceRaw(requestParameters: GetOrganizationBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['periodAmount'] == null) {
            throw new runtime.RequiredError(
                'periodAmount',
                'Required parameter "periodAmount" was null or undefined when calling getOrganizationBalance().'
            );
        }

        if (requestParameters['periodType'] == null) {
            throw new runtime.RequiredError(
                'periodType',
                'Required parameter "periodType" was null or undefined when calling getOrganizationBalance().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['periodAmount'] != null) {
            queryParameters['periodAmount'] = requestParameters['periodAmount'];
        }

        if (requestParameters['periodType'] != null) {
            queryParameters['periodType'] = requestParameters['periodType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/organization-balance`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get organization balance
     */
    async getOrganizationBalance(requestParameters: GetOrganizationBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getOrganizationBalanceRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetOrganizationBalancePeriodTypeEnum = {
    Day: 'day',
    Month: 'month',
    Year: 'year'
} as const;
export type GetOrganizationBalancePeriodTypeEnum = typeof GetOrganizationBalancePeriodTypeEnum[keyof typeof GetOrganizationBalancePeriodTypeEnum];
