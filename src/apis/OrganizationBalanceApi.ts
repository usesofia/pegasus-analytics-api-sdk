/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus analytics-api
 * Api do sistema Pegasus para geração de relatórios e dashboards.
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OrganizationBalanceHistoryPerAccountEntity,
  OrganizationBalancePerAccountEntity,
} from '../models/index';
import {
    OrganizationBalanceHistoryPerAccountEntityFromJSON,
    OrganizationBalanceHistoryPerAccountEntityToJSON,
    OrganizationBalancePerAccountEntityFromJSON,
    OrganizationBalancePerAccountEntityToJSON,
} from '../models/index';

export interface GetOrganizationBalanceHistoryPerAccountRequest {
    periodAmount: number;
    periodType: GetOrganizationBalanceHistoryPerAccountPeriodTypeEnum;
}

/**
 * OrganizationBalanceApi - interface
 * 
 * @export
 * @interface OrganizationBalanceApiInterface
 */
export interface OrganizationBalanceApiInterface {
    /**
     * 
     * @summary Get organization balance history per account
     * @param {number} periodAmount Quantidade de períodos
     * @param {'day' | 'month' | 'year'} periodType Tipo de período
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationBalanceApiInterface
     */
    getOrganizationBalanceHistoryPerAccountRaw(requestParameters: GetOrganizationBalanceHistoryPerAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganizationBalanceHistoryPerAccountEntity>>>;

    /**
     * Get organization balance history per account
     */
    getOrganizationBalanceHistoryPerAccount(requestParameters: GetOrganizationBalanceHistoryPerAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganizationBalanceHistoryPerAccountEntity>>;

    /**
     * 
     * @summary Get organization balance per account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationBalanceApiInterface
     */
    getOrganizationBalancePerAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganizationBalancePerAccountEntity>>>;

    /**
     * Get organization balance per account
     */
    getOrganizationBalancePerAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganizationBalancePerAccountEntity>>;

    /**
     * 
     * @summary Get organization total balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationBalanceApiInterface
     */
    getOrganizationTotalBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationBalancePerAccountEntity>>;

    /**
     * Get organization total balance
     */
    getOrganizationTotalBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationBalancePerAccountEntity>;

}

/**
 * 
 */
export class OrganizationBalanceApi extends runtime.BaseAPI implements OrganizationBalanceApiInterface {

    /**
     * Get organization balance history per account
     */
    async getOrganizationBalanceHistoryPerAccountRaw(requestParameters: GetOrganizationBalanceHistoryPerAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganizationBalanceHistoryPerAccountEntity>>> {
        if (requestParameters['periodAmount'] == null) {
            throw new runtime.RequiredError(
                'periodAmount',
                'Required parameter "periodAmount" was null or undefined when calling getOrganizationBalanceHistoryPerAccount().'
            );
        }

        if (requestParameters['periodType'] == null) {
            throw new runtime.RequiredError(
                'periodType',
                'Required parameter "periodType" was null or undefined when calling getOrganizationBalanceHistoryPerAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['periodAmount'] != null) {
            queryParameters['periodAmount'] = requestParameters['periodAmount'];
        }

        if (requestParameters['periodType'] != null) {
            queryParameters['periodType'] = requestParameters['periodType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/organization-balance/per-account/history`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganizationBalanceHistoryPerAccountEntityFromJSON));
    }

    /**
     * Get organization balance history per account
     */
    async getOrganizationBalanceHistoryPerAccount(requestParameters: GetOrganizationBalanceHistoryPerAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganizationBalanceHistoryPerAccountEntity>> {
        const response = await this.getOrganizationBalanceHistoryPerAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get organization balance per account
     */
    async getOrganizationBalancePerAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganizationBalancePerAccountEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/organization-balance/per-account`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganizationBalancePerAccountEntityFromJSON));
    }

    /**
     * Get organization balance per account
     */
    async getOrganizationBalancePerAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganizationBalancePerAccountEntity>> {
        const response = await this.getOrganizationBalancePerAccountRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get organization total balance
     */
    async getOrganizationTotalBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationBalancePerAccountEntity>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/organization-balance/total`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationBalancePerAccountEntityFromJSON(jsonValue));
    }

    /**
     * Get organization total balance
     */
    async getOrganizationTotalBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationBalancePerAccountEntity> {
        const response = await this.getOrganizationTotalBalanceRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetOrganizationBalanceHistoryPerAccountPeriodTypeEnum = {
    Day: 'day',
    Month: 'month',
    Year: 'year'
} as const;
export type GetOrganizationBalanceHistoryPerAccountPeriodTypeEnum = typeof GetOrganizationBalanceHistoryPerAccountPeriodTypeEnum[keyof typeof GetOrganizationBalanceHistoryPerAccountPeriodTypeEnum];
