/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus analytics-api
 * Api do sistema Pegasus para geração de relatórios e dashboards.
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionResponseEntity,
  FinancialMeasuresReportEntity,
  FinancialResultCompositionReportEntity,
  FinancialStatementReportEntity,
} from '../models/index';
import {
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    FinancialMeasuresReportEntityFromJSON,
    FinancialMeasuresReportEntityToJSON,
    FinancialResultCompositionReportEntityFromJSON,
    FinancialResultCompositionReportEntityToJSON,
    FinancialStatementReportEntityFromJSON,
    FinancialStatementReportEntityToJSON,
} from '../models/index';

export interface GenerateFinancialMeasuresReportRequest {
    recurringFinancialRecord?: string;
    installmentFinancialRecord?: string;
    account?: string;
    reconciled?: string;
    completed?: string;
    amountType?: GenerateFinancialMeasuresReportAmountTypeEnum;
    tags?: string;
    createdAtTo?: string;
    createdAtFrom?: string;
    cashDateTo?: string;
    cashDateFrom?: string;
    competenceDateTo?: string;
    competenceDateFrom?: string;
    subcategory?: string;
    contact?: string;
    dueDateTo?: string;
    dueDateFrom?: string;
    direction?: GenerateFinancialMeasuresReportDirectionEnum;
}

export interface GenerateFinancialResultCompositionReportRequest {
    amountType?: GenerateFinancialResultCompositionReportAmountTypeEnum;
    reconciled?: string;
    completed?: string;
    tags?: string;
    createdAtTo?: string;
    cashDateTo?: string;
    cashDateFrom?: string;
    competenceDateTo?: string;
    competenceDateFrom?: string;
    subcategory?: string;
    contact?: string;
    dueDateTo?: string;
    dueDateFrom?: string;
    direction?: GenerateFinancialResultCompositionReportDirectionEnum;
}

export interface GenerateFinancialStatementReportRequest {
    referenceDate: GenerateFinancialStatementReportReferenceDateEnum;
    periodTo: string;
    periodFrom: string;
    grouping: GenerateFinancialStatementReportGroupingEnum;
    tags?: string;
    completed?: string;
}

/**
 * FinancialStatementsReportsApi - interface
 * 
 * @export
 * @interface FinancialStatementsReportsApiInterface
 */
export interface FinancialStatementsReportsApiInterface {
    /**
     * 
     * @summary Gera relatório de medidas financeiras
     * @param {string} [recurringFinancialRecord] ID do lançamento financeiro recorrente
     * @param {string} [installmentFinancialRecord] ID do lançamento financeiro recorrente
     * @param {string} [account] ID da conta
     * @param {string} [reconciled] Status de conciliação
     * @param {string} [completed] Status de conclusão dos lançamentos
     * @param {'base' | 'final'} [amountType] Tipo de valor a ser utilizado nos cálculos. \&quot;base\&quot; para amount, \&quot;final\&quot; para finalAmount. Padrão é \&quot;final\&quot;.
     * @param {string} [tags] IDs das tags
     * @param {string} [createdAtTo] Data final da criação
     * @param {string} [createdAtFrom] Data inicial da criação
     * @param {string} [cashDateTo] Data final do caixa
     * @param {string} [cashDateFrom] Data inicial do caixa
     * @param {string} [competenceDateTo] Data final da competência
     * @param {string} [competenceDateFrom] Data inicial da competência
     * @param {string} [subcategory] ID da subcategoria
     * @param {string} [contact] ID do contato
     * @param {string} [dueDateTo] Data final do vencimento
     * @param {string} [dueDateFrom] Data inicial do vencimento
     * @param {'IN' | 'OUT'} [direction] Direção do relatório
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialStatementsReportsApiInterface
     */
    generateFinancialMeasuresReportRaw(requestParameters: GenerateFinancialMeasuresReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialMeasuresReportEntity>>;

    /**
     * Gera relatório de medidas financeiras
     */
    generateFinancialMeasuresReport(requestParameters: GenerateFinancialMeasuresReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialMeasuresReportEntity>;

    /**
     * 
     * @summary Gera relatório de composição do resultado financeiro
     * @param {'base' | 'final'} [amountType] Tipo de valor a ser utilizado nos cálculos. \&quot;base\&quot; para amount, \&quot;final\&quot; para finalAmount. Padrão é \&quot;final\&quot;.
     * @param {string} [reconciled] Status de conciliação
     * @param {string} [completed] Status do relatório
     * @param {string} [tags] IDs das tags
     * @param {string} [createdAtTo] Data final da criação
     * @param {string} [cashDateTo] Data final do caixa
     * @param {string} [cashDateFrom] Data inicial do caixa
     * @param {string} [competenceDateTo] Data final da competência
     * @param {string} [competenceDateFrom] Data inicial da competência
     * @param {string} [subcategory] ID da subcategoria
     * @param {string} [contact] ID do contato
     * @param {string} [dueDateTo] Data final do vencimento
     * @param {string} [dueDateFrom] Data inicial do vencimento
     * @param {'IN' | 'OUT'} [direction] Direção do relatório
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialStatementsReportsApiInterface
     */
    generateFinancialResultCompositionReportRaw(requestParameters: GenerateFinancialResultCompositionReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialResultCompositionReportEntity>>;

    /**
     * Gera relatório de composição do resultado financeiro
     */
    generateFinancialResultCompositionReport(requestParameters: GenerateFinancialResultCompositionReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialResultCompositionReportEntity>;

    /**
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     * @summary Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     * @param {'dueDate' | 'cashDate' | 'competenceDate'} referenceDate Campo de data a ser utilizado para filtros
     * @param {string} periodTo Período do relatório
     * @param {string} periodFrom Período do relatório
     * @param {'daily' | 'monthly' | 'yearly'} grouping Agrupamento do relatório
     * @param {string} [tags] IDs das tags
     * @param {string} [completed] Status de conclusão dos lançamentos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialStatementsReportsApiInterface
     */
    generateFinancialStatementReportRaw(requestParameters: GenerateFinancialStatementReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialStatementReportEntity>>;

    /**
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     */
    generateFinancialStatementReport(requestParameters: GenerateFinancialStatementReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialStatementReportEntity>;

}

/**
 * 
 */
export class FinancialStatementsReportsApi extends runtime.BaseAPI implements FinancialStatementsReportsApiInterface {

    /**
     * Gera relatório de medidas financeiras
     */
    async generateFinancialMeasuresReportRaw(requestParameters: GenerateFinancialMeasuresReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialMeasuresReportEntity>> {
        const queryParameters: any = {};

        if (requestParameters['recurringFinancialRecord'] != null) {
            queryParameters['recurringFinancialRecord'] = requestParameters['recurringFinancialRecord'];
        }

        if (requestParameters['installmentFinancialRecord'] != null) {
            queryParameters['installmentFinancialRecord'] = requestParameters['installmentFinancialRecord'];
        }

        if (requestParameters['account'] != null) {
            queryParameters['account'] = requestParameters['account'];
        }

        if (requestParameters['reconciled'] != null) {
            queryParameters['reconciled'] = requestParameters['reconciled'];
        }

        if (requestParameters['completed'] != null) {
            queryParameters['completed'] = requestParameters['completed'];
        }

        if (requestParameters['amountType'] != null) {
            queryParameters['amountType'] = requestParameters['amountType'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['createdAtTo'] != null) {
            queryParameters['createdAtTo'] = requestParameters['createdAtTo'];
        }

        if (requestParameters['createdAtFrom'] != null) {
            queryParameters['createdAtFrom'] = requestParameters['createdAtFrom'];
        }

        if (requestParameters['cashDateTo'] != null) {
            queryParameters['cashDateTo'] = requestParameters['cashDateTo'];
        }

        if (requestParameters['cashDateFrom'] != null) {
            queryParameters['cashDateFrom'] = requestParameters['cashDateFrom'];
        }

        if (requestParameters['competenceDateTo'] != null) {
            queryParameters['competenceDateTo'] = requestParameters['competenceDateTo'];
        }

        if (requestParameters['competenceDateFrom'] != null) {
            queryParameters['competenceDateFrom'] = requestParameters['competenceDateFrom'];
        }

        if (requestParameters['subcategory'] != null) {
            queryParameters['subcategory'] = requestParameters['subcategory'];
        }

        if (requestParameters['contact'] != null) {
            queryParameters['contact'] = requestParameters['contact'];
        }

        if (requestParameters['dueDateTo'] != null) {
            queryParameters['dueDateTo'] = requestParameters['dueDateTo'];
        }

        if (requestParameters['dueDateFrom'] != null) {
            queryParameters['dueDateFrom'] = requestParameters['dueDateFrom'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/financial-statements/financial-measures-report`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialMeasuresReportEntityFromJSON(jsonValue));
    }

    /**
     * Gera relatório de medidas financeiras
     */
    async generateFinancialMeasuresReport(requestParameters: GenerateFinancialMeasuresReportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialMeasuresReportEntity> {
        const response = await this.generateFinancialMeasuresReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gera relatório de composição do resultado financeiro
     */
    async generateFinancialResultCompositionReportRaw(requestParameters: GenerateFinancialResultCompositionReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialResultCompositionReportEntity>> {
        const queryParameters: any = {};

        if (requestParameters['amountType'] != null) {
            queryParameters['amountType'] = requestParameters['amountType'];
        }

        if (requestParameters['reconciled'] != null) {
            queryParameters['reconciled'] = requestParameters['reconciled'];
        }

        if (requestParameters['completed'] != null) {
            queryParameters['completed'] = requestParameters['completed'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['createdAtTo'] != null) {
            queryParameters['createdAtTo'] = requestParameters['createdAtTo'];
        }

        if (requestParameters['cashDateTo'] != null) {
            queryParameters['cashDateTo'] = requestParameters['cashDateTo'];
        }

        if (requestParameters['cashDateFrom'] != null) {
            queryParameters['cashDateFrom'] = requestParameters['cashDateFrom'];
        }

        if (requestParameters['competenceDateTo'] != null) {
            queryParameters['competenceDateTo'] = requestParameters['competenceDateTo'];
        }

        if (requestParameters['competenceDateFrom'] != null) {
            queryParameters['competenceDateFrom'] = requestParameters['competenceDateFrom'];
        }

        if (requestParameters['subcategory'] != null) {
            queryParameters['subcategory'] = requestParameters['subcategory'];
        }

        if (requestParameters['contact'] != null) {
            queryParameters['contact'] = requestParameters['contact'];
        }

        if (requestParameters['dueDateTo'] != null) {
            queryParameters['dueDateTo'] = requestParameters['dueDateTo'];
        }

        if (requestParameters['dueDateFrom'] != null) {
            queryParameters['dueDateFrom'] = requestParameters['dueDateFrom'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/financial-statements/result-composition/report`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialResultCompositionReportEntityFromJSON(jsonValue));
    }

    /**
     * Gera relatório de composição do resultado financeiro
     */
    async generateFinancialResultCompositionReport(requestParameters: GenerateFinancialResultCompositionReportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialResultCompositionReportEntity> {
        const response = await this.generateFinancialResultCompositionReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     */
    async generateFinancialStatementReportRaw(requestParameters: GenerateFinancialStatementReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialStatementReportEntity>> {
        if (requestParameters['referenceDate'] == null) {
            throw new runtime.RequiredError(
                'referenceDate',
                'Required parameter "referenceDate" was null or undefined when calling generateFinancialStatementReport().'
            );
        }

        if (requestParameters['periodTo'] == null) {
            throw new runtime.RequiredError(
                'periodTo',
                'Required parameter "periodTo" was null or undefined when calling generateFinancialStatementReport().'
            );
        }

        if (requestParameters['periodFrom'] == null) {
            throw new runtime.RequiredError(
                'periodFrom',
                'Required parameter "periodFrom" was null or undefined when calling generateFinancialStatementReport().'
            );
        }

        if (requestParameters['grouping'] == null) {
            throw new runtime.RequiredError(
                'grouping',
                'Required parameter "grouping" was null or undefined when calling generateFinancialStatementReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['completed'] != null) {
            queryParameters['completed'] = requestParameters['completed'];
        }

        if (requestParameters['referenceDate'] != null) {
            queryParameters['referenceDate'] = requestParameters['referenceDate'];
        }

        if (requestParameters['periodTo'] != null) {
            queryParameters['periodTo'] = requestParameters['periodTo'];
        }

        if (requestParameters['periodFrom'] != null) {
            queryParameters['periodFrom'] = requestParameters['periodFrom'];
        }

        if (requestParameters['grouping'] != null) {
            queryParameters['grouping'] = requestParameters['grouping'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/financial-statements/report`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialStatementReportEntityFromJSON(jsonValue));
    }

    /**
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     * Gera relatório de demonstrativo financeiro com opções de agrupamento e filtros
     */
    async generateFinancialStatementReport(requestParameters: GenerateFinancialStatementReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialStatementReportEntity> {
        const response = await this.generateFinancialStatementReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GenerateFinancialMeasuresReportAmountTypeEnum = {
    Base: 'base',
    Final: 'final'
} as const;
export type GenerateFinancialMeasuresReportAmountTypeEnum = typeof GenerateFinancialMeasuresReportAmountTypeEnum[keyof typeof GenerateFinancialMeasuresReportAmountTypeEnum];
/**
 * @export
 */
export const GenerateFinancialMeasuresReportDirectionEnum = {
    In: 'IN',
    Out: 'OUT'
} as const;
export type GenerateFinancialMeasuresReportDirectionEnum = typeof GenerateFinancialMeasuresReportDirectionEnum[keyof typeof GenerateFinancialMeasuresReportDirectionEnum];
/**
 * @export
 */
export const GenerateFinancialResultCompositionReportAmountTypeEnum = {
    Base: 'base',
    Final: 'final'
} as const;
export type GenerateFinancialResultCompositionReportAmountTypeEnum = typeof GenerateFinancialResultCompositionReportAmountTypeEnum[keyof typeof GenerateFinancialResultCompositionReportAmountTypeEnum];
/**
 * @export
 */
export const GenerateFinancialResultCompositionReportDirectionEnum = {
    In: 'IN',
    Out: 'OUT'
} as const;
export type GenerateFinancialResultCompositionReportDirectionEnum = typeof GenerateFinancialResultCompositionReportDirectionEnum[keyof typeof GenerateFinancialResultCompositionReportDirectionEnum];
/**
 * @export
 */
export const GenerateFinancialStatementReportReferenceDateEnum = {
    DueDate: 'dueDate',
    CashDate: 'cashDate',
    CompetenceDate: 'competenceDate'
} as const;
export type GenerateFinancialStatementReportReferenceDateEnum = typeof GenerateFinancialStatementReportReferenceDateEnum[keyof typeof GenerateFinancialStatementReportReferenceDateEnum];
/**
 * @export
 */
export const GenerateFinancialStatementReportGroupingEnum = {
    Daily: 'daily',
    Monthly: 'monthly',
    Yearly: 'yearly'
} as const;
export type GenerateFinancialStatementReportGroupingEnum = typeof GenerateFinancialStatementReportGroupingEnum[keyof typeof GenerateFinancialStatementReportGroupingEnum];
