/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus analytics-api
 * Api do sistema Pegasus para geração de relatórios e dashboards.
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AggregatedFinancialRecordsReportEntity,
  ExceptionResponseEntity,
  FinancialRecordsAggregatedResultReportEntity,
  MonthlyFinancialReportEntity,
} from '../models/index';
import {
    AggregatedFinancialRecordsReportEntityFromJSON,
    AggregatedFinancialRecordsReportEntityToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    FinancialRecordsAggregatedResultReportEntityFromJSON,
    FinancialRecordsAggregatedResultReportEntityToJSON,
    MonthlyFinancialReportEntityFromJSON,
    MonthlyFinancialReportEntityToJSON,
} from '../models/index';

export interface GenerateAggregatedFinancialRecordsReportRequest {
    aggregationDirection: GenerateAggregatedFinancialRecordsReportAggregationDirectionEnum;
    groupBy: GenerateAggregatedFinancialRecordsReportGroupByEnum;
    amountType?: GenerateAggregatedFinancialRecordsReportAmountTypeEnum;
    recurringFinancialRecord?: string;
    installmentFinancialRecord?: string;
    account?: string;
    reconciled?: string;
    completed?: string;
    tags?: string;
    createdAtTo?: string;
    createdAtFrom?: string;
    cashDateTo?: string;
    cashDateFrom?: string;
    competenceDateTo?: string;
    competenceDateFrom?: string;
    subcategory?: string;
    contact?: string;
    dueDateTo?: string;
    dueDateFrom?: string;
    direction?: GenerateAggregatedFinancialRecordsReportDirectionEnum;
    sortOrder?: GenerateAggregatedFinancialRecordsReportSortOrderEnum;
}

export interface GenerateMonthlyFinancialReportRequest {
    amountType?: GenerateMonthlyFinancialReportAmountTypeEnum;
    account?: string;
    reconciled?: string;
    completed?: string;
    cashDateTo?: string;
    cashDateFrom?: string;
    competenceDateTo?: string;
    competenceDateFrom?: string;
    subcategory?: string;
    contact?: string;
    dueDateTo?: string;
    dueDateFrom?: string;
    direction?: GenerateMonthlyFinancialReportDirectionEnum;
}

export interface GetAggregatedResultReportRequest {
    amountType?: GetAggregatedResultReportAmountTypeEnum;
    account?: string;
    reconciled?: boolean;
    completed?: boolean;
    tags?: string;
    createdAtTo?: string;
    createdAtFrom?: string;
    cashDateTo?: string;
    cashDateFrom?: string;
    competenceDateTo?: string;
    competenceDateFrom?: string;
    subcategory?: string;
    contact?: string;
    dueDateTo?: string;
    dueDateFrom?: string;
    direction?: GetAggregatedResultReportDirectionEnum;
}

/**
 * FinancialRecordsReportsApi - interface
 * 
 * @export
 * @interface FinancialRecordsReportsApiInterface
 */
export interface FinancialRecordsReportsApiInterface {
    /**
     * 
     * @summary Gera relatório de lançamentos financeiros agregados por categoria, contato ou tag
     * @param {'IN' | 'OUT'} aggregationDirection Direção do lançamento financeiro
     * @param {'category' | 'contact' | 'tag'} groupBy Campo para agrupamento dos dados
     * @param {'base' | 'final'} [amountType] Tipo de valor a ser utilizado nos cálculos
     * @param {string} [recurringFinancialRecord] ID do lançamento financeiro recorrente
     * @param {string} [installmentFinancialRecord] ID do lançamento financeiro parcelado
     * @param {string} [account] Conta do lançamento financeiro
     * @param {string} [reconciled] Status de conciliação dos lançamentos
     * @param {string} [completed] Status de conclusão dos lançamentos
     * @param {string} [tags] Tags do lançamento financeiro separadas por vírgula
     * @param {string} [createdAtTo] Data de criação final
     * @param {string} [createdAtFrom] Data de criação inicial
     * @param {string} [cashDateTo] Data de caixa final
     * @param {string} [cashDateFrom] Data de caixa inicial
     * @param {string} [competenceDateTo] Data de competência final
     * @param {string} [competenceDateFrom] Data de competência inicial
     * @param {string} [subcategory] Subcategoria do lançamento financeiro
     * @param {string} [contact] Contato do lançamento financeiro
     * @param {string} [dueDateTo] Data de vencimento final
     * @param {string} [dueDateFrom] Data de vencimento inicial
     * @param {'IN' | 'OUT'} [direction] Direção do lançamento financeiro
     * @param {'asc' | 'desc'} [sortOrder] Ordem de classificação
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordsReportsApiInterface
     */
    generateAggregatedFinancialRecordsReportRaw(requestParameters: GenerateAggregatedFinancialRecordsReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AggregatedFinancialRecordsReportEntity>>;

    /**
     * Gera relatório de lançamentos financeiros agregados por categoria, contato ou tag
     */
    generateAggregatedFinancialRecordsReport(requestParameters: GenerateAggregatedFinancialRecordsReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AggregatedFinancialRecordsReportEntity>;

    /**
     * 
     * @summary Gera relatório financeiro mensal para os últimos 12 meses
     * @param {'base' | 'final'} [amountType] Tipo de valor a ser utilizado nos cálculos. \&quot;base\&quot; para amount, \&quot;final\&quot; para finalAmount. Padrão é \&quot;final\&quot;.
     * @param {string} [account] Conta do lançamento financeiro
     * @param {string} [reconciled] Status de conciliação dos lançamentos
     * @param {string} [completed] Status de conclusão dos lançamentos
     * @param {string} [cashDateTo] Data de pagamento final
     * @param {string} [cashDateFrom] Data de pagamento inicial
     * @param {string} [competenceDateTo] Data de competência final
     * @param {string} [competenceDateFrom] Data de competência inicial
     * @param {string} [subcategory] Subcategoria do lançamento financeiro
     * @param {string} [contact] Contato do lançamento financeiro
     * @param {string} [dueDateTo] Data de vencimento final
     * @param {string} [dueDateFrom] Data de vencimento inicial
     * @param {'IN' | 'OUT'} [direction] Direção do lançamento financeiro
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordsReportsApiInterface
     */
    generateMonthlyFinancialReportRaw(requestParameters: GenerateMonthlyFinancialReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonthlyFinancialReportEntity>>;

    /**
     * Gera relatório financeiro mensal para os últimos 12 meses
     */
    generateMonthlyFinancialReport(requestParameters: GenerateMonthlyFinancialReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonthlyFinancialReportEntity>;

    /**
     * 
     * @summary Get aggregated   result report for financial records
     * @param {'base' | 'final'} [amountType] Tipo de valor a ser utilizado nos cálculos. \&quot;base\&quot; para amount, \&quot;final\&quot; para finalAmount. Padrão é \&quot;final\&quot;.
     * @param {string} [account] Conta do lançamento financeiro.
     * @param {boolean} [reconciled] Indica se o lançamento financeiro foi reconciliado.
     * @param {boolean} [completed] Indica se o lançamento financeiro foi completado.
     * @param {string} [tags] Tags do lançamento financeiro separadas por vírgula.
     * @param {string} [createdAtTo] Data de criação final.
     * @param {string} [createdAtFrom] Data de criação inicial.
     * @param {string} [cashDateTo] Data de pagamento final.
     * @param {string} [cashDateFrom] Data de pagamento inicial.
     * @param {string} [competenceDateTo] Data de competência final.
     * @param {string} [competenceDateFrom] Data de competência inicial.
     * @param {string} [subcategory] Subcategoria do lançamento financeiro.
     * @param {string} [contact] Contato do lançamento financeiro.
     * @param {string} [dueDateTo] Data de vencimento final.
     * @param {string} [dueDateFrom] Data de vencimento inicial.
     * @param {'IN' | 'OUT'} [direction] Direção do lançamento financeiro.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordsReportsApiInterface
     */
    getAggregatedResultReportRaw(requestParameters: GetAggregatedResultReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordsAggregatedResultReportEntity>>;

    /**
     * Get aggregated   result report for financial records
     */
    getAggregatedResultReport(requestParameters: GetAggregatedResultReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordsAggregatedResultReportEntity>;

}

/**
 * 
 */
export class FinancialRecordsReportsApi extends runtime.BaseAPI implements FinancialRecordsReportsApiInterface {

    /**
     * Gera relatório de lançamentos financeiros agregados por categoria, contato ou tag
     */
    async generateAggregatedFinancialRecordsReportRaw(requestParameters: GenerateAggregatedFinancialRecordsReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AggregatedFinancialRecordsReportEntity>> {
        if (requestParameters['aggregationDirection'] == null) {
            throw new runtime.RequiredError(
                'aggregationDirection',
                'Required parameter "aggregationDirection" was null or undefined when calling generateAggregatedFinancialRecordsReport().'
            );
        }

        if (requestParameters['groupBy'] == null) {
            throw new runtime.RequiredError(
                'groupBy',
                'Required parameter "groupBy" was null or undefined when calling generateAggregatedFinancialRecordsReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['amountType'] != null) {
            queryParameters['amountType'] = requestParameters['amountType'];
        }

        if (requestParameters['recurringFinancialRecord'] != null) {
            queryParameters['recurringFinancialRecord'] = requestParameters['recurringFinancialRecord'];
        }

        if (requestParameters['installmentFinancialRecord'] != null) {
            queryParameters['installmentFinancialRecord'] = requestParameters['installmentFinancialRecord'];
        }

        if (requestParameters['account'] != null) {
            queryParameters['account'] = requestParameters['account'];
        }

        if (requestParameters['reconciled'] != null) {
            queryParameters['reconciled'] = requestParameters['reconciled'];
        }

        if (requestParameters['completed'] != null) {
            queryParameters['completed'] = requestParameters['completed'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['createdAtTo'] != null) {
            queryParameters['createdAtTo'] = requestParameters['createdAtTo'];
        }

        if (requestParameters['createdAtFrom'] != null) {
            queryParameters['createdAtFrom'] = requestParameters['createdAtFrom'];
        }

        if (requestParameters['cashDateTo'] != null) {
            queryParameters['cashDateTo'] = requestParameters['cashDateTo'];
        }

        if (requestParameters['cashDateFrom'] != null) {
            queryParameters['cashDateFrom'] = requestParameters['cashDateFrom'];
        }

        if (requestParameters['competenceDateTo'] != null) {
            queryParameters['competenceDateTo'] = requestParameters['competenceDateTo'];
        }

        if (requestParameters['competenceDateFrom'] != null) {
            queryParameters['competenceDateFrom'] = requestParameters['competenceDateFrom'];
        }

        if (requestParameters['subcategory'] != null) {
            queryParameters['subcategory'] = requestParameters['subcategory'];
        }

        if (requestParameters['contact'] != null) {
            queryParameters['contact'] = requestParameters['contact'];
        }

        if (requestParameters['dueDateTo'] != null) {
            queryParameters['dueDateTo'] = requestParameters['dueDateTo'];
        }

        if (requestParameters['dueDateFrom'] != null) {
            queryParameters['dueDateFrom'] = requestParameters['dueDateFrom'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['aggregationDirection'] != null) {
            queryParameters['aggregationDirection'] = requestParameters['aggregationDirection'];
        }

        if (requestParameters['groupBy'] != null) {
            queryParameters['groupBy'] = requestParameters['groupBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/financial-records/aggregated/report`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AggregatedFinancialRecordsReportEntityFromJSON(jsonValue));
    }

    /**
     * Gera relatório de lançamentos financeiros agregados por categoria, contato ou tag
     */
    async generateAggregatedFinancialRecordsReport(requestParameters: GenerateAggregatedFinancialRecordsReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AggregatedFinancialRecordsReportEntity> {
        const response = await this.generateAggregatedFinancialRecordsReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gera relatório financeiro mensal para os últimos 12 meses
     */
    async generateMonthlyFinancialReportRaw(requestParameters: GenerateMonthlyFinancialReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonthlyFinancialReportEntity>> {
        const queryParameters: any = {};

        if (requestParameters['amountType'] != null) {
            queryParameters['amountType'] = requestParameters['amountType'];
        }

        if (requestParameters['account'] != null) {
            queryParameters['account'] = requestParameters['account'];
        }

        if (requestParameters['reconciled'] != null) {
            queryParameters['reconciled'] = requestParameters['reconciled'];
        }

        if (requestParameters['completed'] != null) {
            queryParameters['completed'] = requestParameters['completed'];
        }

        if (requestParameters['cashDateTo'] != null) {
            queryParameters['cashDateTo'] = requestParameters['cashDateTo'];
        }

        if (requestParameters['cashDateFrom'] != null) {
            queryParameters['cashDateFrom'] = requestParameters['cashDateFrom'];
        }

        if (requestParameters['competenceDateTo'] != null) {
            queryParameters['competenceDateTo'] = requestParameters['competenceDateTo'];
        }

        if (requestParameters['competenceDateFrom'] != null) {
            queryParameters['competenceDateFrom'] = requestParameters['competenceDateFrom'];
        }

        if (requestParameters['subcategory'] != null) {
            queryParameters['subcategory'] = requestParameters['subcategory'];
        }

        if (requestParameters['contact'] != null) {
            queryParameters['contact'] = requestParameters['contact'];
        }

        if (requestParameters['dueDateTo'] != null) {
            queryParameters['dueDateTo'] = requestParameters['dueDateTo'];
        }

        if (requestParameters['dueDateFrom'] != null) {
            queryParameters['dueDateFrom'] = requestParameters['dueDateFrom'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/financial-records/aggregated-monthly/report`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonthlyFinancialReportEntityFromJSON(jsonValue));
    }

    /**
     * Gera relatório financeiro mensal para os últimos 12 meses
     */
    async generateMonthlyFinancialReport(requestParameters: GenerateMonthlyFinancialReportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonthlyFinancialReportEntity> {
        const response = await this.generateMonthlyFinancialReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get aggregated   result report for financial records
     */
    async getAggregatedResultReportRaw(requestParameters: GetAggregatedResultReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordsAggregatedResultReportEntity>> {
        const queryParameters: any = {};

        if (requestParameters['amountType'] != null) {
            queryParameters['amountType'] = requestParameters['amountType'];
        }

        if (requestParameters['account'] != null) {
            queryParameters['account'] = requestParameters['account'];
        }

        if (requestParameters['reconciled'] != null) {
            queryParameters['reconciled'] = requestParameters['reconciled'];
        }

        if (requestParameters['completed'] != null) {
            queryParameters['completed'] = requestParameters['completed'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['createdAtTo'] != null) {
            queryParameters['createdAtTo'] = requestParameters['createdAtTo'];
        }

        if (requestParameters['createdAtFrom'] != null) {
            queryParameters['createdAtFrom'] = requestParameters['createdAtFrom'];
        }

        if (requestParameters['cashDateTo'] != null) {
            queryParameters['cashDateTo'] = requestParameters['cashDateTo'];
        }

        if (requestParameters['cashDateFrom'] != null) {
            queryParameters['cashDateFrom'] = requestParameters['cashDateFrom'];
        }

        if (requestParameters['competenceDateTo'] != null) {
            queryParameters['competenceDateTo'] = requestParameters['competenceDateTo'];
        }

        if (requestParameters['competenceDateFrom'] != null) {
            queryParameters['competenceDateFrom'] = requestParameters['competenceDateFrom'];
        }

        if (requestParameters['subcategory'] != null) {
            queryParameters['subcategory'] = requestParameters['subcategory'];
        }

        if (requestParameters['contact'] != null) {
            queryParameters['contact'] = requestParameters['contact'];
        }

        if (requestParameters['dueDateTo'] != null) {
            queryParameters['dueDateTo'] = requestParameters['dueDateTo'];
        }

        if (requestParameters['dueDateFrom'] != null) {
            queryParameters['dueDateFrom'] = requestParameters['dueDateFrom'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/financial-records/aggregated-result/report`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialRecordsAggregatedResultReportEntityFromJSON(jsonValue));
    }

    /**
     * Get aggregated   result report for financial records
     */
    async getAggregatedResultReport(requestParameters: GetAggregatedResultReportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordsAggregatedResultReportEntity> {
        const response = await this.getAggregatedResultReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GenerateAggregatedFinancialRecordsReportAggregationDirectionEnum = {
    In: 'IN',
    Out: 'OUT'
} as const;
export type GenerateAggregatedFinancialRecordsReportAggregationDirectionEnum = typeof GenerateAggregatedFinancialRecordsReportAggregationDirectionEnum[keyof typeof GenerateAggregatedFinancialRecordsReportAggregationDirectionEnum];
/**
 * @export
 */
export const GenerateAggregatedFinancialRecordsReportGroupByEnum = {
    Category: 'category',
    Contact: 'contact',
    Tag: 'tag'
} as const;
export type GenerateAggregatedFinancialRecordsReportGroupByEnum = typeof GenerateAggregatedFinancialRecordsReportGroupByEnum[keyof typeof GenerateAggregatedFinancialRecordsReportGroupByEnum];
/**
 * @export
 */
export const GenerateAggregatedFinancialRecordsReportAmountTypeEnum = {
    Base: 'base',
    Final: 'final'
} as const;
export type GenerateAggregatedFinancialRecordsReportAmountTypeEnum = typeof GenerateAggregatedFinancialRecordsReportAmountTypeEnum[keyof typeof GenerateAggregatedFinancialRecordsReportAmountTypeEnum];
/**
 * @export
 */
export const GenerateAggregatedFinancialRecordsReportDirectionEnum = {
    In: 'IN',
    Out: 'OUT'
} as const;
export type GenerateAggregatedFinancialRecordsReportDirectionEnum = typeof GenerateAggregatedFinancialRecordsReportDirectionEnum[keyof typeof GenerateAggregatedFinancialRecordsReportDirectionEnum];
/**
 * @export
 */
export const GenerateAggregatedFinancialRecordsReportSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GenerateAggregatedFinancialRecordsReportSortOrderEnum = typeof GenerateAggregatedFinancialRecordsReportSortOrderEnum[keyof typeof GenerateAggregatedFinancialRecordsReportSortOrderEnum];
/**
 * @export
 */
export const GenerateMonthlyFinancialReportAmountTypeEnum = {
    Base: 'base',
    Final: 'final'
} as const;
export type GenerateMonthlyFinancialReportAmountTypeEnum = typeof GenerateMonthlyFinancialReportAmountTypeEnum[keyof typeof GenerateMonthlyFinancialReportAmountTypeEnum];
/**
 * @export
 */
export const GenerateMonthlyFinancialReportDirectionEnum = {
    In: 'IN',
    Out: 'OUT'
} as const;
export type GenerateMonthlyFinancialReportDirectionEnum = typeof GenerateMonthlyFinancialReportDirectionEnum[keyof typeof GenerateMonthlyFinancialReportDirectionEnum];
/**
 * @export
 */
export const GetAggregatedResultReportAmountTypeEnum = {
    Base: 'base',
    Final: 'final'
} as const;
export type GetAggregatedResultReportAmountTypeEnum = typeof GetAggregatedResultReportAmountTypeEnum[keyof typeof GetAggregatedResultReportAmountTypeEnum];
/**
 * @export
 */
export const GetAggregatedResultReportDirectionEnum = {
    In: 'IN',
    Out: 'OUT'
} as const;
export type GetAggregatedResultReportDirectionEnum = typeof GetAggregatedResultReportDirectionEnum[keyof typeof GetAggregatedResultReportDirectionEnum];
