/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus analytics-api
 * Api do sistema Pegasus para para geração de relatórios e dashboards.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionResponseEntity,
  FinancialRecordsAggregatedResultReportEntity,
} from '../models/index';
import {
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    FinancialRecordsAggregatedResultReportEntityFromJSON,
    FinancialRecordsAggregatedResultReportEntityToJSON,
} from '../models/index';

export interface GenerateAggregatedResultReportRequest {
    account?: string;
    reconciled?: boolean;
    completed?: boolean;
    tags?: Array<string>;
    createdAtTo?: string;
    createdAtFrom?: string;
    cashDateTo?: string;
    cashDateFrom?: string;
    competenceDateTo?: string;
    competenceDateFrom?: string;
    category?: string;
    contact?: string;
    dueDateTo?: string;
    dueDateFrom?: string;
    direction?: string;
}

/**
 * FinancialRecordsReportsApi - interface
 * 
 * @export
 * @interface FinancialRecordsReportsApiInterface
 */
export interface FinancialRecordsReportsApiInterface {
    /**
     * 
     * @summary Generate aggregated result report for financial records
     * @param {string} [account] Conta do lançamento financeiro.
     * @param {boolean} [reconciled] Indica se o lançamento financeiro foi reconciliado.
     * @param {boolean} [completed] Indica se o lançamento financeiro foi completado.
     * @param {Array<string>} [tags] Tags do lançamento financeiro.
     * @param {string} [createdAtTo] Data de criação final.
     * @param {string} [createdAtFrom] Data de criação inicial.
     * @param {string} [cashDateTo] Data de pagamento final.
     * @param {string} [cashDateFrom] Data de pagamento inicial.
     * @param {string} [competenceDateTo] Data de competência final.
     * @param {string} [competenceDateFrom] Data de competência inicial.
     * @param {string} [category] Categoria do lançamento financeiro.
     * @param {string} [contact] Contato do lançamento financeiro.
     * @param {string} [dueDateTo] Data de vencimento final.
     * @param {string} [dueDateFrom] Data de vencimento inicial.
     * @param {string} [direction] Direção do lançamento financeiro.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordsReportsApiInterface
     */
    generateAggregatedResultReportRaw(requestParameters: GenerateAggregatedResultReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordsAggregatedResultReportEntity>>;

    /**
     * Generate aggregated result report for financial records
     */
    generateAggregatedResultReport(requestParameters: GenerateAggregatedResultReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordsAggregatedResultReportEntity>;

}

/**
 * 
 */
export class FinancialRecordsReportsApi extends runtime.BaseAPI implements FinancialRecordsReportsApiInterface {

    /**
     * Generate aggregated result report for financial records
     */
    async generateAggregatedResultReportRaw(requestParameters: GenerateAggregatedResultReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordsAggregatedResultReportEntity>> {
        const queryParameters: any = {};

        if (requestParameters['account'] != null) {
            queryParameters['account'] = requestParameters['account'];
        }

        if (requestParameters['reconciled'] != null) {
            queryParameters['reconciled'] = requestParameters['reconciled'];
        }

        if (requestParameters['completed'] != null) {
            queryParameters['completed'] = requestParameters['completed'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['createdAtTo'] != null) {
            queryParameters['createdAtTo'] = requestParameters['createdAtTo'];
        }

        if (requestParameters['createdAtFrom'] != null) {
            queryParameters['createdAtFrom'] = requestParameters['createdAtFrom'];
        }

        if (requestParameters['cashDateTo'] != null) {
            queryParameters['cashDateTo'] = requestParameters['cashDateTo'];
        }

        if (requestParameters['cashDateFrom'] != null) {
            queryParameters['cashDateFrom'] = requestParameters['cashDateFrom'];
        }

        if (requestParameters['competenceDateTo'] != null) {
            queryParameters['competenceDateTo'] = requestParameters['competenceDateTo'];
        }

        if (requestParameters['competenceDateFrom'] != null) {
            queryParameters['competenceDateFrom'] = requestParameters['competenceDateFrom'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['contact'] != null) {
            queryParameters['contact'] = requestParameters['contact'];
        }

        if (requestParameters['dueDateTo'] != null) {
            queryParameters['dueDateTo'] = requestParameters['dueDateTo'];
        }

        if (requestParameters['dueDateFrom'] != null) {
            queryParameters['dueDateFrom'] = requestParameters['dueDateFrom'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/external/financial-records/aggregated-result/report`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialRecordsAggregatedResultReportEntityFromJSON(jsonValue));
    }

    /**
     * Generate aggregated result report for financial records
     */
    async generateAggregatedResultReport(requestParameters: GenerateAggregatedResultReportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordsAggregatedResultReportEntity> {
        const response = await this.generateAggregatedResultReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
