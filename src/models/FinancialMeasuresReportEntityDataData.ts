/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus analytics-api
 * Api do sistema Pegasus para geração de relatórios e dashboards.
 *
 * The version of the OpenAPI document: 1.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Medidas financeiras calculadas
 * @export
 * @interface FinancialMeasuresReportEntityDataData
 */
export interface FinancialMeasuresReportEntityDataData {
    /**
     * Margem de contribuição em formato string
     * @type {string}
     * @memberof FinancialMeasuresReportEntityDataData
     */
    contributionMargin: string;
    /**
     * EBITDA (Earnings Before Interest, Taxes, Depreciation and Amortization) em formato string
     * @type {string}
     * @memberof FinancialMeasuresReportEntityDataData
     */
    ebitda: string;
    /**
     * Lucro líquido em formato string
     * @type {string}
     * @memberof FinancialMeasuresReportEntityDataData
     */
    netIncome: string;
    /**
     * Ponto de equilíbrio em formato string
     * @type {string}
     * @memberof FinancialMeasuresReportEntityDataData
     */
    breakEvenPoint: string;
    /**
     * Ticket médio em formato string
     * @type {string}
     * @memberof FinancialMeasuresReportEntityDataData
     */
    averageTicket: string;
}

/**
 * Check if a given object implements the FinancialMeasuresReportEntityDataData interface.
 */
export function instanceOfFinancialMeasuresReportEntityDataData(value: object): value is FinancialMeasuresReportEntityDataData {
    if (!('contributionMargin' in value) || value['contributionMargin'] === undefined) return false;
    if (!('ebitda' in value) || value['ebitda'] === undefined) return false;
    if (!('netIncome' in value) || value['netIncome'] === undefined) return false;
    if (!('breakEvenPoint' in value) || value['breakEvenPoint'] === undefined) return false;
    if (!('averageTicket' in value) || value['averageTicket'] === undefined) return false;
    return true;
}

export function FinancialMeasuresReportEntityDataDataFromJSON(json: any): FinancialMeasuresReportEntityDataData {
    return FinancialMeasuresReportEntityDataDataFromJSONTyped(json, false);
}

export function FinancialMeasuresReportEntityDataDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): FinancialMeasuresReportEntityDataData {
    if (json == null) {
        return json;
    }
    return {
        
        'contributionMargin': json['contributionMargin'],
        'ebitda': json['ebitda'],
        'netIncome': json['netIncome'],
        'breakEvenPoint': json['breakEvenPoint'],
        'averageTicket': json['averageTicket'],
    };
}

export function FinancialMeasuresReportEntityDataDataToJSON(json: any): FinancialMeasuresReportEntityDataData {
    return FinancialMeasuresReportEntityDataDataToJSONTyped(json, false);
}

export function FinancialMeasuresReportEntityDataDataToJSONTyped(value?: FinancialMeasuresReportEntityDataData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'contributionMargin': value['contributionMargin'],
        'ebitda': value['ebitda'],
        'netIncome': value['netIncome'],
        'breakEvenPoint': value['breakEvenPoint'],
        'averageTicket': value['averageTicket'],
    };
}

