/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus analytics-api
 * Api do sistema Pegasus para geração de relatórios e dashboards.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CashFlowReportEntityDataDataInnerPeriod } from './CashFlowReportEntityDataDataInnerPeriod';
import {
    CashFlowReportEntityDataDataInnerPeriodFromJSON,
    CashFlowReportEntityDataDataInnerPeriodFromJSONTyped,
    CashFlowReportEntityDataDataInnerPeriodToJSON,
    CashFlowReportEntityDataDataInnerPeriodToJSONTyped,
} from './CashFlowReportEntityDataDataInnerPeriod';

/**
 * 
 * @export
 * @interface FinancialStatementReportEntityDataDataInner
 */
export interface FinancialStatementReportEntityDataDataInner {
    /**
     * 
     * @type {CashFlowReportEntityDataDataInnerPeriod}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    period: CashFlowReportEntityDataDataInnerPeriod;
    /**
     * Receita operacional
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    operationalRevenue: number;
    /**
     * Despesas operacionais
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    operatingExpenses: number;
    /**
     * Despesas de vendas e marketing
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    salesAndMarketingExpenses: number;
    /**
     * Margem de contribuição
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    contributionMargin: number;
    /**
     * Percentual da margem de contribuição
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    contributionMarginPercent: number;
    /**
     * Despesas administrativas
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    administrativeExpenses: number;
    /**
     * Despesas de pessoal
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    personnelExpenses: number;
    /**
     * EBITDA
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    ebitda: number;
    /**
     * Percentual do EBITDA
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    ebitdaPercent: number;
    /**
     * Receita financeira
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    financialIncome: number;
    /**
     * Outras receitas
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    otherIncome: number;
    /**
     * Despesas financeiras
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    financialExpenses: number;
    /**
     * Investimentos
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    investments: number;
    /**
     * Despesa com imposto de renda
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    incomeTaxExpense: number;
    /**
     * Lucro líquido
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    netIncome: number;
    /**
     * Percentual do lucro líquido
     * @type {number}
     * @memberof FinancialStatementReportEntityDataDataInner
     */
    netIncomePercent: number;
}

/**
 * Check if a given object implements the FinancialStatementReportEntityDataDataInner interface.
 */
export function instanceOfFinancialStatementReportEntityDataDataInner(value: object): value is FinancialStatementReportEntityDataDataInner {
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('operationalRevenue' in value) || value['operationalRevenue'] === undefined) return false;
    if (!('operatingExpenses' in value) || value['operatingExpenses'] === undefined) return false;
    if (!('salesAndMarketingExpenses' in value) || value['salesAndMarketingExpenses'] === undefined) return false;
    if (!('contributionMargin' in value) || value['contributionMargin'] === undefined) return false;
    if (!('contributionMarginPercent' in value) || value['contributionMarginPercent'] === undefined) return false;
    if (!('administrativeExpenses' in value) || value['administrativeExpenses'] === undefined) return false;
    if (!('personnelExpenses' in value) || value['personnelExpenses'] === undefined) return false;
    if (!('ebitda' in value) || value['ebitda'] === undefined) return false;
    if (!('ebitdaPercent' in value) || value['ebitdaPercent'] === undefined) return false;
    if (!('financialIncome' in value) || value['financialIncome'] === undefined) return false;
    if (!('otherIncome' in value) || value['otherIncome'] === undefined) return false;
    if (!('financialExpenses' in value) || value['financialExpenses'] === undefined) return false;
    if (!('investments' in value) || value['investments'] === undefined) return false;
    if (!('incomeTaxExpense' in value) || value['incomeTaxExpense'] === undefined) return false;
    if (!('netIncome' in value) || value['netIncome'] === undefined) return false;
    if (!('netIncomePercent' in value) || value['netIncomePercent'] === undefined) return false;
    return true;
}

export function FinancialStatementReportEntityDataDataInnerFromJSON(json: any): FinancialStatementReportEntityDataDataInner {
    return FinancialStatementReportEntityDataDataInnerFromJSONTyped(json, false);
}

export function FinancialStatementReportEntityDataDataInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): FinancialStatementReportEntityDataDataInner {
    if (json == null) {
        return json;
    }
    return {
        
        'period': CashFlowReportEntityDataDataInnerPeriodFromJSON(json['period']),
        'operationalRevenue': json['operationalRevenue'],
        'operatingExpenses': json['operatingExpenses'],
        'salesAndMarketingExpenses': json['salesAndMarketingExpenses'],
        'contributionMargin': json['contributionMargin'],
        'contributionMarginPercent': json['contributionMarginPercent'],
        'administrativeExpenses': json['administrativeExpenses'],
        'personnelExpenses': json['personnelExpenses'],
        'ebitda': json['ebitda'],
        'ebitdaPercent': json['ebitdaPercent'],
        'financialIncome': json['financialIncome'],
        'otherIncome': json['otherIncome'],
        'financialExpenses': json['financialExpenses'],
        'investments': json['investments'],
        'incomeTaxExpense': json['incomeTaxExpense'],
        'netIncome': json['netIncome'],
        'netIncomePercent': json['netIncomePercent'],
    };
}

export function FinancialStatementReportEntityDataDataInnerToJSON(json: any): FinancialStatementReportEntityDataDataInner {
    return FinancialStatementReportEntityDataDataInnerToJSONTyped(json, false);
}

export function FinancialStatementReportEntityDataDataInnerToJSONTyped(value?: FinancialStatementReportEntityDataDataInner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'period': CashFlowReportEntityDataDataInnerPeriodToJSON(value['period']),
        'operationalRevenue': value['operationalRevenue'],
        'operatingExpenses': value['operatingExpenses'],
        'salesAndMarketingExpenses': value['salesAndMarketingExpenses'],
        'contributionMargin': value['contributionMargin'],
        'contributionMarginPercent': value['contributionMarginPercent'],
        'administrativeExpenses': value['administrativeExpenses'],
        'personnelExpenses': value['personnelExpenses'],
        'ebitda': value['ebitda'],
        'ebitdaPercent': value['ebitdaPercent'],
        'financialIncome': value['financialIncome'],
        'otherIncome': value['otherIncome'],
        'financialExpenses': value['financialExpenses'],
        'investments': value['investments'],
        'incomeTaxExpense': value['incomeTaxExpense'],
        'netIncome': value['netIncome'],
        'netIncomePercent': value['netIncomePercent'],
    };
}

