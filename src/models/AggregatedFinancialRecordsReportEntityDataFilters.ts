/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus analytics-api
 * Api do sistema Pegasus para geração de relatórios e dashboards.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Filtros aplicados
 * @export
 * @interface AggregatedFinancialRecordsReportEntityDataFilters
 */
export interface AggregatedFinancialRecordsReportEntityDataFilters {
    /**
     * Campo para agrupamento dos dados
     * @type {string}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    groupBy: AggregatedFinancialRecordsReportEntityDataFiltersGroupByEnum;
    /**
     * Ordem de classificação
     * @type {string}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    sortOrder?: AggregatedFinancialRecordsReportEntityDataFiltersSortOrderEnum;
    /**
     * Campos para popular
     * @type {string}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    populate?: string;
    /**
     * Direção do lançamento financeiro
     * @type {string}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    direction: AggregatedFinancialRecordsReportEntityDataFiltersDirectionEnum;
    /**
     * Data de vencimento inicial
     * @type {string}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    dueDateFrom: string;
    /**
     * Data de vencimento final
     * @type {string}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    dueDateTo: string;
    /**
     * ID do contato
     * @type {string}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    contact?: string;
    /**
     * ID da subcategoria
     * @type {string}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    subcategory?: string;
    /**
     * Data de competência inicial
     * @type {string}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    competenceDateFrom?: string;
    /**
     * Data de competência final
     * @type {string}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    competenceDateTo?: string;
    /**
     * Data de pagamento inicial
     * @type {string}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    cashDateFrom?: string;
    /**
     * Data de pagamento final
     * @type {string}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    cashDateTo?: string;
    /**
     * Data de criação inicial
     * @type {any}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    createdAtFrom?: any | null;
    /**
     * Data de criação final
     * @type {any}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    createdAtTo?: any | null;
    /**
     * IDs das tags separadas por vírgula
     * @type {Array<string>}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    tags?: Array<string>;
    /**
     * Status de conclusão
     * @type {boolean}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    completed?: boolean;
    /**
     * Status de reconciliação
     * @type {boolean}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    reconciled?: boolean;
    /**
     * ID da conta bancária
     * @type {string}
     * @memberof AggregatedFinancialRecordsReportEntityDataFilters
     */
    account?: string;
}


/**
 * @export
 */
export const AggregatedFinancialRecordsReportEntityDataFiltersGroupByEnum = {
    Category: 'category',
    Contact: 'contact',
    Tag: 'tag'
} as const;
export type AggregatedFinancialRecordsReportEntityDataFiltersGroupByEnum = typeof AggregatedFinancialRecordsReportEntityDataFiltersGroupByEnum[keyof typeof AggregatedFinancialRecordsReportEntityDataFiltersGroupByEnum];

/**
 * @export
 */
export const AggregatedFinancialRecordsReportEntityDataFiltersSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type AggregatedFinancialRecordsReportEntityDataFiltersSortOrderEnum = typeof AggregatedFinancialRecordsReportEntityDataFiltersSortOrderEnum[keyof typeof AggregatedFinancialRecordsReportEntityDataFiltersSortOrderEnum];

/**
 * @export
 */
export const AggregatedFinancialRecordsReportEntityDataFiltersDirectionEnum = {
    Income: 'INCOME',
    Outcome: 'OUTCOME'
} as const;
export type AggregatedFinancialRecordsReportEntityDataFiltersDirectionEnum = typeof AggregatedFinancialRecordsReportEntityDataFiltersDirectionEnum[keyof typeof AggregatedFinancialRecordsReportEntityDataFiltersDirectionEnum];


/**
 * Check if a given object implements the AggregatedFinancialRecordsReportEntityDataFilters interface.
 */
export function instanceOfAggregatedFinancialRecordsReportEntityDataFilters(value: object): value is AggregatedFinancialRecordsReportEntityDataFilters {
    if (!('groupBy' in value) || value['groupBy'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('dueDateFrom' in value) || value['dueDateFrom'] === undefined) return false;
    if (!('dueDateTo' in value) || value['dueDateTo'] === undefined) return false;
    return true;
}

export function AggregatedFinancialRecordsReportEntityDataFiltersFromJSON(json: any): AggregatedFinancialRecordsReportEntityDataFilters {
    return AggregatedFinancialRecordsReportEntityDataFiltersFromJSONTyped(json, false);
}

export function AggregatedFinancialRecordsReportEntityDataFiltersFromJSONTyped(json: any, ignoreDiscriminator: boolean): AggregatedFinancialRecordsReportEntityDataFilters {
    if (json == null) {
        return json;
    }
    return {
        
        'groupBy': json['groupBy'],
        'sortOrder': json['sortOrder'] == null ? undefined : json['sortOrder'],
        'populate': json['populate'] == null ? undefined : json['populate'],
        'direction': json['direction'],
        'dueDateFrom': json['dueDateFrom'],
        'dueDateTo': json['dueDateTo'],
        'contact': json['contact'] == null ? undefined : json['contact'],
        'subcategory': json['subcategory'] == null ? undefined : json['subcategory'],
        'competenceDateFrom': json['competenceDateFrom'] == null ? undefined : json['competenceDateFrom'],
        'competenceDateTo': json['competenceDateTo'] == null ? undefined : json['competenceDateTo'],
        'cashDateFrom': json['cashDateFrom'] == null ? undefined : json['cashDateFrom'],
        'cashDateTo': json['cashDateTo'] == null ? undefined : json['cashDateTo'],
        'createdAtFrom': json['createdAtFrom'] == null ? undefined : json['createdAtFrom'],
        'createdAtTo': json['createdAtTo'] == null ? undefined : json['createdAtTo'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'completed': json['completed'] == null ? undefined : json['completed'],
        'reconciled': json['reconciled'] == null ? undefined : json['reconciled'],
        'account': json['account'] == null ? undefined : json['account'],
    };
}

export function AggregatedFinancialRecordsReportEntityDataFiltersToJSON(json: any): AggregatedFinancialRecordsReportEntityDataFilters {
    return AggregatedFinancialRecordsReportEntityDataFiltersToJSONTyped(json, false);
}

export function AggregatedFinancialRecordsReportEntityDataFiltersToJSONTyped(value?: AggregatedFinancialRecordsReportEntityDataFilters | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'groupBy': value['groupBy'],
        'sortOrder': value['sortOrder'],
        'populate': value['populate'],
        'direction': value['direction'],
        'dueDateFrom': value['dueDateFrom'],
        'dueDateTo': value['dueDateTo'],
        'contact': value['contact'],
        'subcategory': value['subcategory'],
        'competenceDateFrom': value['competenceDateFrom'],
        'competenceDateTo': value['competenceDateTo'],
        'cashDateFrom': value['cashDateFrom'],
        'cashDateTo': value['cashDateTo'],
        'createdAtFrom': value['createdAtFrom'],
        'createdAtTo': value['createdAtTo'],
        'tags': value['tags'],
        'completed': value['completed'],
        'reconciled': value['reconciled'],
        'account': value['account'],
    };
}

